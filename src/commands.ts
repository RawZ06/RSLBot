import { AttachmentBuilder, Message, TextChannel } from "discord.js";
import { SeedGenerator } from "./rsl/generate";
import * as Shuffle from "./shuffle/shuffle";
import * as CustomSeed from "./rsl/custom"
import { v4 as uuidv4 } from 'uuid';
import { Logger } from "./logger/logger";
import * as fs from 'fs'
import { Weight } from "./weights/weight";
import { SeedFrancoGenerator } from "./franco/franco";
import * as Franco from "./franco/parseArgs"
import { getSettingsFromChoices, pickCompatibleSettings, randomInteger, settingList } from "./franco/settings";
const helpMessageCS = fs.readFileSync("./data/help-cs.txt", "utf-8")
const helpMessageFranco = fs.readFileSync("./data/help-franco.txt", "utf-8")

async function runGenerator(seedGenerator: SeedGenerator, message: Message, params: string): Promise<void>;
async function runGenerator(seedGenerator: SeedFrancoGenerator, message: Message, params: Record<string, any>): Promise<void>;
async function runGenerator(
    seedGenerator: SeedGenerator|SeedFrancoGenerator,
    message: Message, 
    params: string | Record<string, any>
) {
    const result = await seedGenerator.generateSeed(params as any);
    if (result.length === 0) {
        console.error("No seed generated, no result");
        (message.channel as TextChannel).send("No seed generated, please retry or contact RawZ06");
        return;
    }

    const patches = await seedGenerator.getPatcheFiles();
    if (patches === null) {
        console.error("No seed generated, no patch file");
        (message.channel as TextChannel).send("No seed generated, please retry or contact RawZ06");
        return;
    }

    const patchFiles = patches.split("\n");
    const seed = result[0].split(".")[0];
    seedGenerator.sendFiles(patchFiles, seed);
    seedGenerator.clear(seed);
    
    const weightsInfo = typeof params === 'string' ? `with weights ${params}` : "franco";
    Logger.info(`Seed ${seed} ${weightsInfo} generated by ${message.author.username}`);
}

export async function executeCommand(message: Message, command: string, args: string[]): Promise<void> {
    const seedGenerator = new SeedGenerator(message);
    const francoGenerator = new SeedFrancoGenerator(message);
    switch (command) {
        case "ping":
            Logger.info(`${message.author.username} : ${message.content}`);
            (message.channel as TextChannel).send("pong!");
            break;
        case "!seed":
            Logger.info(`${message.author.username} : ${message.content}`)
            try {
                const weightFile = seedGenerator.getWeightFile(args);
                const weightMessage = seedGenerator.getWeightMessage(args);
                (message.channel as TextChannel).send(`This command !!seed is deprecated, please use !seed instead, you can use this command if !seed doesn't work`);
                (message.channel as TextChannel).send(`Seed generating with weights ${weightMessage}`);
                runGenerator(seedGenerator, message, weightFile)
            } catch (e) {
                (message.channel as TextChannel).send(e.toString())
            }
            break;
        case "shuffle":
            Logger.info(`${message.author.username} : ${message.content}`)
            try {
                const shuffle = new Shuffle.Shuffle()
                const { count, noOutput, weight } = Shuffle.parseArguments(args);
                if (weight) {
                    const attachmentBuilder = new AttachmentBuilder(Buffer.from(shuffle.getWeights(), 'utf-8'), { name: 'weights.csv' });
                    (message.channel as TextChannel).send({ files: [attachmentBuilder] });
                    return;
                }
                const choices = shuffle.getRandomSettings(count);
                if (choices === null) {
                    (message.channel as TextChannel).send("Impossible to generate more than 57 settings, aborted")
                    return;
                }
                (message.channel as TextChannel).send("Seed generating with only this settings : || " + choices.toString() + " ||")
                if (!noOutput) {
                    const weights = shuffle.generateWeights(choices);
                    const uuid = uuidv4();
                    const filename = "shuffle_" + uuid + ".json"
                    shuffle.writeFile(filename, weights)
                    await runGenerator(seedGenerator, message, filename)
                    shuffle.rmFile(filename);
                } else {
                    (message.channel as TextChannel).send("Seed no generated, because no-output is on")
                }
            } catch (e) {
                (message.channel as TextChannel).send(e.toString())
            }
            break;
        case "seed":
            Logger.info(`${message.author.username} : ${message.content}`)
            try {
                const custom = new CustomSeed.CustomSeed()
                const { typeSeed, ban, list, help: helpCS } = CustomSeed.parseArguments(args);
                if(list) {
                    (message.channel as TextChannel).send({
                        files: [{
                            attachment: "data/allsettings.json",
                            name: "settings_custom.json"
                        }]
                    });
                    return;
                }
                if(helpCS) {
                    (message.channel as TextChannel).send(helpMessageCS);
                    return;
                }
                const banned = custom.getRandomSettings(ban);
                if(banned && banned.length) {
                    (message.channel as TextChannel).send(`Seed generating ${Weight.getWeightMessage(typeSeed)} without : ${banned.toString()}`)
                }
                else {
                    (message.channel as TextChannel).send(`Seed generating ${Weight.getWeightMessage(typeSeed)}`)
                }
                const deprecated = Weight.getDeprecated(typeSeed);
                if(deprecated) {
                    (message.channel as TextChannel).send("# " + deprecated)
                }
                const weights = custom.generateWeights(message, typeSeed, banned);
                const uuid = uuidv4();
                const filename = "custom_" + uuid + ".json"
                custom.writeFile(filename, weights)
                await runGenerator(seedGenerator, message, filename)
                custom.rmFile(filename);
            } catch (e) {
                (message.channel as TextChannel).send(e.toString())
            }
            break;
        case "franco":
                Logger.info(`${message.author.username} : ${message.content}`)
                const {help, list, count, settings, mode, mq} = Franco.parseArguments(args)
                if(help) {
                    (message.channel as TextChannel).send(helpMessageFranco);
                    return;
                }
                if(list) {
                    (message.channel as TextChannel).send(settingList().join('\n'));
                    return;
                }
                try {
                    let picked;
                    if(settings) {
                        Logger.info(`Generating settings with specified settings : ${settings.join(';')}`);
                    (message.channel as TextChannel).send(`Seed generating Franco with ${settings.join(';')}`)
                        picked = settings;
                    } else if(count) {
                        Logger.info(`Generating settings with ${count} settings to pick, mode ${mode}`);
                        (message.channel as TextChannel).send(`Seed generating Franco with ${count} to pick, mode ${mode}`)
                        picked = pickCompatibleSettings(count, mode === 'easy');
                        (message.channel as TextChannel).send(`Seed generating Franco with ${picked.join(';')}`)
                        Logger.info(`Generating settings with picked settings : ${picked.join(';')}`)
                    } else {
                        Logger.info(`Generating classic Franco`);
                        (message.channel as TextChannel).send(`Seed generating classic Franco`)
                        picked = []
                    }
                    const numberOfMQ = (mode === 'mq' && mq === 0) ? randomInteger(1, 12) : mq;
                    if(numberOfMQ > 0) {
                        (message.channel as TextChannel).send(`Add ${numberOfMQ} dungeon MQ`)
                    }
                    const params = getSettingsFromChoices(picked, numberOfMQ);
                    await runGenerator(francoGenerator, message, params)
                } catch (e) {
                    (message.channel as TextChannel).send(e.toString())
                }
                break;
        default:
            break;
    }
}